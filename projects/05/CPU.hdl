// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instructions In
    
        // A or C Instruction
        Not(in=instruction[15], out=Ainstruction);
        
        // Select Write to RAM
        And(a=instruction[15], b=instruction[3], out=writeM);

        // Multiplexors
        Mux16(a=instruction, b=aluOut, sel=instruction[15], out=mux00Out); // Mux from instruction
        Mux16(a=aRegOut, b=inM, sel=instruction[12], out=mux01Out);        // Mux from memory

    // Registers 
        // A Register
        Or(a=Ainstruction, b=instruction[5], out=loadRegA);
        ARegister(in=mux00Out, load=loadRegA, out=aRegOut, out[0..14] = addressM);
    
        
        // D Register
        And(a=instruction[15], b=instruction[4], out=loadRegD);
        DRegister(in=aluOut, load=loadRegD, out=dRegOut);

    // ALU
    ALU(x=dRegOut, y=mux01Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out = outM, zr=zrOut, ng=ngOut);

    // Program Counter
        Not(in=zrOut, out=notZr);           // ALU Output not zero
        Not(in=ngOut, out=notNg);           // ALU Output not negative
        And(a=notZr, b=notNg, out=aluPos);  // ALUT output positive

        // Check Jumps
        And(a=false, b=false, out=selNull); // null
        And(a=notZr, b=notNg, out=selJGT);  // JGT
        And(a=true, b=zrOut, out=selJEQ);   // JEQ
        Or(a=zrOut, b=selJGT, out=selJGE);  // JGE
        And(a=true, b=zrOut, out=selJLT);   // JLT
        Or(a=zrOut, b=selJGT, out=selJNE);  // JNE
        Or(a=ngOut, b=zrOut, out=selJLE);   // JLE
        Or(a=true, b=true, out=selJMP);     // JMP

        // Select Jump
        And(a=instruction[0], b=aluPos, out=checkJ0);
        And(a=instruction[1], b=zrOut, out=checkJ1);
        And(a=instruction[2], b=ngOut, out=checkJ2);

        Or(a=checkJ0, b=checkJ1, out=J1orJ2);
        Or(a=J1orJ2, b=checkJ2, out=loadTrue);

        And(a=loadTrue, b=instruction[15], out=setLoad);
        Not(in=setLoad, out=setIncrement);

        // PC
        PC(in=aRegOut, load=setLoad, inc=setIncrement, reset=reset, out[0..14]=pc);

}