// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int stringLength;
    field int stringMaxLength;
    field Array stringArray;

    constructor String new(int maxLength) {
        // Empty string with a maximum length of maxLength and initial length of 0
        if (maxLength = 0){
            let maxLength = 1;
        }
        let stringArray = Array.new(maxLength);
        let stringLength = 0;
        let stringMaxLength = maxLength;
        return this;
    }

    method void dispose() {
        do Array.dispose(stringArray);
        return;
    }
    
    method int length() {
        // Return string length
        return stringLength;        
    }

    method char charAt(int j) {
        // Return  character at the j-th location 
        return stringArray[j];
    }

    method void setCharAt(int j, char c) {
        // Set the character at the j-th location of this string to c
        let stringArray[j] = c;
        return;
    }

    method String appendChar(char c) {
        // Appends c to string end and returns
        if (stringLength < stringMaxLength) {
            let stringArray[stringLength] = c;
            let stringLength = stringLength + 1;
        }
        return this;
    }

    method void eraseLastChar() {
        // Erases last character
        if (stringLength > 0) {
            let stringArray[stringLength] = 0;
            let stringLength = stringLength - 1;
        }
        return;
    }

    method int intValue() {
        // Return integer value of this string, until a non-digit character is detected.
        var char currentChar;
        var int i;
        var int sum;
        var int currentNumber;
        let i = 0;
        let sum = 0;
        let currentNumber = 0;
        let currentChar = stringArray[i];
        while ( String.isCharDigit(currentChar) & (i < stringLength) ) {
            let currentNumber = String.charAsDigit(currentChar);
            if (i > 0){
                let sum = Math.multiply(sum,10);
            }
            let sum = sum + currentNumber;
            let i = i + 1;
            let currentChar = stringArray[i];
        }
        return sum;
    }

    method void setInt(int val) {
        // Set this string to hold a string representation of the given value
        // 1. Reset the string
        // 2. Check if val < 0, and if so set leading "-" and make value positive
        // 3. Send val to recursive implementation
        let stringLength = 0; // Need to reset string!
        if (val < 0) {
            do appendChar(45);
            //let val = Math.abs(val);
            let val = -val;
        }
        do recursiveSetInt(val);
        return;
    }

    method void recursiveSetInt(int val) {
        // Recursive implementation of setInt
        var int lastDigit;
        var char currentChar;
        
        let lastDigit = val - ( (val / 10) * 10); // Math.divide performs integer division
        let currentChar = String.digitAsChar(lastDigit);
        
        if (val < 10){
            do appendChar(currentChar);
        }
        else {
            let val = val / 10;
            do recursiveSetInt(val); 
            do appendChar(currentChar);
        }
        return;
        
    }

    function char newLine() {
        // Return the new line character.
        return 128;
    }

    function char backSpace() {
        // Return  backspace character.
        return 129;

    }

    function char doubleQuote() {
        // Return  double quote (") character
        return 34;
    }

//////////////////// HELPERS /////////////////////////////////////////

    function boolean isCharDigit(char charToCheck){
        return (charToCheck > 47) & (charToCheck < 58);
    }

    function int charAsDigit(char charToConvert){
        return charToConvert - 48;
    }

    function char digitAsChar(int digitToConvert){
        return digitToConvert + 48;
    }

}