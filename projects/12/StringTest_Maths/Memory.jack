// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;
    static int heapEnd;

    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335; // Length of heap
        let heapEnd = 16384;
        return;
    }

    function int peek(int address) {
        return ram[address];
    }

    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function int alloc(int size) { 
        var Array currentMemoryBlock;
        var boolean freeMemoryFound;
        let currentMemoryBlock = freeList;
        let freeMemoryFound = false;
        while (~freeMemoryFound) {
            if ( currentMemoryBlock[1] > (size + 1) ) {
                let freeMemoryFound = true;
                let currentMemoryBlock[size + 2] = currentMemoryBlock[0];               // Reset linkedlist pointer to next free block
                let currentMemoryBlock[size + 3] = currentMemoryBlock[1] - (size + 2);  // Reset free size for this block
                
                let currentMemoryBlock[0] = 0;                                          // Set header[0] to zero
                let currentMemoryBlock[1] = size;                                       // Set header[1] to alloc size
                
                if (currentMemoryBlock = freeList) {                                    // If we find the free block stright from the freelist
                    let freeList = currentMemoryBlock + (size + 2);                     // Reset linkedlist pointer to remaining free segment
                }

            }
            else {
                let currentMemoryBlock = currentMemoryBlock[0];
            }
        }
        return currentMemoryBlock + 2;                                                  // Return pointer to base address of new memory segment
    }

    function void deAlloc(Array o) {
        var Array currentMemoryBlock;
        let currentMemoryBlock = freeList;
        while (currentMemoryBlock[0] > 0) {
            let currentMemoryBlock = currentMemoryBlock[0];
        }
        let currentMemoryBlock[0] = o;
        let o[0] = 0;
        return;
    }    
}