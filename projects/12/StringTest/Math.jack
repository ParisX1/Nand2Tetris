// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powerArray;

    /** Initializes the library. */
    function void init() {
        let powerArray = Array.new(16);
        let powerArray[15] = 16384 + 16384;
        let powerArray[14] = 16384;
        let powerArray[13] = 8192;
        let powerArray[12] = 4096;
        let powerArray[11] = 2048;
        let powerArray[10] = 1024;
        let powerArray[9] = 512;
        let powerArray[8] = 256;
        let powerArray[7] = 128;
        let powerArray[6] = 64;
        let powerArray[5] = 32;
        let powerArray[4] = 16;
        let powerArray[3] = 8;
        let powerArray[2] = 4;
        let powerArray[1] = 2;
        let powerArray[0] = 1;
        return;
    }

    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
        /*
        var int answer;
        let answer = Math.multiply(x, x);
        return Math.sqrt(answer);
        */
    }

    function int multiply(int x, int y) {
        var int sum;
        var int i;
        var Array yArray;
        var boolean makeNegative;
        let sum = 0;
        let i = 0;
        let yArray = Math.createBinaryArray(y);
        let makeNegative = false;

         // Check for negatives
        if ( (x < 0) | (y < 0 ) ) {                 // Are either x or y < 0?
            if ( ~((x < 0) & (y < 0 )) ) {
                let makeNegative = true;            // Return a negative if they are not both negative
            }
        }

        while ( i < 16 ) {
            if (yArray[i] = 1) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        if(makeNegative){
            return -sum;
        }
        else{
            return sum;
        }
    }

    function Array createBinaryArray(int number){
        var Array numberArray;
        var int i;
        let numberArray = Array.new(16);
        let i = 15;

        while (i > -1) {

            if (( number - powerArray[i]) > -1 ) {
                let numberArray[i] = 1;
                let number = number - powerArray[i];
            } 
            else {
                let numberArray[i] = 0;
            }
            let i = i - 1;
        }
        return numberArray;
    }

    function int divide(int x, int y) {
        // Note: Integer division
        //var int count;
        //var int remainder;
        var int answer;
        var int q;
        var boolean makeNegative;
        //let count = 0;
        let makeNegative = false;

         // Check for negatives
        if ( (x < 0) | (y < 0 ) ) {                 // Are either x or y < 0?
            if ( ~((x < 0) & (y < 0 )) ) {
                let makeNegative = true;            // Return a negative if they are not both negative
            }
        }

        let x = Math.abs(x);
        let y = Math.abs(y);
        
        if ( (y > x) | (y < 0) ) {
            return 0;
        }

        let q = Math.divide(x, 2 * y); 
                
        if ( (x - (2 * q * y) ) < y ) {
            let answer = q + q;
        }

        else {
            let answer = q + q + 1;
        }

        if (makeNegative){
            return -answer;
        }
        else {
            return answer;
        }


        /*
        // Check for negatives
        if ( (x < 0) | (y < 0 ) ) {                 // Are either x or y < 0?
            if ( ~((x < 0) & (y < 0 )) ) {
                let makeNegative = true;            // Return a negative if they are not both negative
            }
        }

        // Make values absolute
        let x = Math.abs(x);
        let y = Math.abs(y);

        // Perform division
        let remainder = x;
        while ( (remainder > 0) & ( (remainder + 1) > y) ) {
            let remainder = remainder - y;
            let count = count + 1;
        }

        if (makeNegative) {
            return -count;
        }
        else {
            return count;
        }
        */
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // Note: Integer only

        var int y;
        var int j;
        var int guessSqr;
        var int guess;
        let y = 0;
        let j = 7;

        while ( j > -1 ) {
            let guess = y + powerArray[j];
            let guessSqr = Math.multiply(guess, guess);
            if ( ~(guessSqr > x) & (guessSqr > 0) ) {
                let y = guess;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        }
        else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        }
        else {
            return a;
        }
    }
}
