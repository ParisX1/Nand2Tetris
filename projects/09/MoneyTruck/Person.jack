class Person {
   field int x, y; // screen location of the Person
   field int size; // length of this Person, in pixels
   field int location; // tracks position on screen
   field int baseScreenAddress;
   field int memAddress;
   //field int memAddress;

   constructor Person new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      let baseScreenAddress = 16384;
      let location = setLocation();
      let memAddress = 0;
      do draw(); // Set initial position
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void setLocation() {
      // Sets loction on screen
      let location = (32 * y) + (x / 16);
      return;
   }

   method void draw() {
      // Draw object on screen
      do setLocation();
      let memAddress = baseScreenAddress + location;
      do Memory.poke(memAddress + 0, 128);
      do Memory.poke(memAddress + 32, 320);
      do Memory.poke(memAddress + 64, 544);
      do Memory.poke(memAddress + 96, 8736);
      do Memory.poke(memAddress + 128, 4544);
      do Memory.poke(memAddress + 160, 2176);
      do Memory.poke(memAddress + 192, 1152);
      do Memory.poke(memAddress + 224, 992);
      do Memory.poke(memAddress + 256, 336);
      do Memory.poke(memAddress + 288, 456);
      do Memory.poke(memAddress + 320, 452);
      do Memory.poke(memAddress + 352, 322);
      do Memory.poke(memAddress + 384, 320);
      do Memory.poke(memAddress + 416, 320);
      do Memory.poke(memAddress + 448, 320);
      do Memory.poke(memAddress + 480, 880);
      return;
   }

   method void erase() {
      // Remove object from screen
      do setLocation();
      let memAddress = baseScreenAddress + location;
      do Memory.poke(memAddress + 0, 0);
      do Memory.poke(memAddress + 32, 0);
      do Memory.poke(memAddress + 64, 0);
      do Memory.poke(memAddress + 96, 0);
      do Memory.poke(memAddress + 128, 0);
      do Memory.poke(memAddress + 160, 0);
      do Memory.poke(memAddress + 192, 0);
      do Memory.poke(memAddress + 224, 0);
      do Memory.poke(memAddress + 256, 0);
      do Memory.poke(memAddress + 288, 0);
      do Memory.poke(memAddress + 320, 0);
      do Memory.poke(memAddress + 352, 0);
      do Memory.poke(memAddress + 384, 0);
      do Memory.poke(memAddress + 416, 0);
      do Memory.poke(memAddress + 448, 0);
      do Memory.poke(memAddress + 480, 0);
      return;
   }

   method void moveUp() {
      if (y > 1) {
         do erase();
         let y = y - 1;
         do draw();
      }
      return;
   }

   method void moveDown() {
      if ((y + size) < 254) {
         do erase();
         let y = y + 1;
         do draw();
      }
      return;
   }

   /** Move left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do erase();
         let x = x - 1;
         do draw();
      }
      return;
   }

   /** Move right by 2 pixels. */
   method void moveRight() {
      if ((x + size) < 510) {
         do erase();
         let x = x + 1;
         do draw();
      }
      return;
   }
}
